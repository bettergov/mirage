{"version":3,"sources":["../node_modules/chroma-sass/sass/chroma/_kss.scss"],"names":[],"mappings":"AAwJI;EA4CA,kBAAiB;CAClB;;AA7CC;EAgDA,sBAAqB;EACrB,YAAW;EACX,aAAY;EACZ,oBAAmB;EACnB,uBAAsB;EACtB,mBAAkB;EAClB,uBAAsB;CACvB;;AAvDC;EA0DA,mBAAkB;CACnB;;AA3DC;EA8DA,8BAA6B;EAC7B,YAAW;EACX,WAAU;EACV,iBAAgB;GAEhB,4BAA4B;EAC5B,+BAA8B;CAC/B;;AArEC;EAwEA,YAAW;CAYZ;;AApFC;EA2EE,YAAW;CACZ;;AA5ED;EAiFE,mBAAkB;EAClB,wBAAuB;CACxB;;AAnFD;EAuFA,eAAc;EACd,mBAAkB;EAClB,WAAU;EACV,kBAAiB;EACjB,mBAAkB;EAClB,YAAW;CACZ","file":"chroma-kss-styles.css","sourcesContent":["// KSS module\n//\n// A basic \"KSS\" module for Chroma.\n//\n// Use `chroma-kss-markup()` to export a chunk of HTML wrapped in a `/* */` CSS\n// comment. Then use `chroma-kss-styles()` to style it.\n//\n// @TODO: These functions and mixins are a bit janky because it exports to HTML\n// directly rather than to JSON or some other exportable data set.\n//\n// Style guide: kss\n\n@import \"./functions\";\n\n// chroma-kss-markup()\n//\n// Returns the HTML needed to display all colors in color() in a KSS style\n// guide. The parameters are used to specify the classes for various elements.\n//\n// Since regular text can only be output with Sass in certain contexts, you must\n// wrap this function call in a CSS comment.\n//\n// Usage:\n// ```scss\n// // Include chroma's optional kss module.\n// @import 'chroma/kss';\n// // Include the colors defined for your project.\n// @import 'init';\n//\n// /*\n// #{chroma-kss-markup()}\n// */\n// ```\n//\n// Then use a Gulp.js or Grunt task to strip the leading and trailing lines\n// (containing \"/*\" and \"*/\" respectively) from the generated file.\n//\n// $wrapper-class     - Defaults to 'kss-style'.\n// $title-class       - Defaults to 'chroma-kss__title'.\n// $description-class - Defaults to 'chroma-kss__description'.\n// $color-class       - Defaults to 'chroma-kss'.\n// $swatch-class      - Defaults to 'chroma-kss__swatch'.\n// $variable-class    - Defaults to 'chroma-kss__variable'.\n// $alt-text-class    - Defaults to 'chroma-kss__alt-text'.\n// $value-class       - Defaults to 'chroma-kss__value'.\n// $reference-class   - Defaults to 'chroma-kss__reference'.\n//\n// style guide: kss.chroma-kss-markup\n@function chroma-kss-markup(\n  $wrapper-class:     'kss-style',\n  $title-class:       'chroma-kss__title',\n  $description-class: 'chroma-kss__description',\n  $color-class:       'chroma-kss',\n  $swatch-class:      'chroma-kss__swatch',\n  $variable-class:    'chroma-kss__variable',\n  $alt-text-class:    'chroma-kss__alt-text',\n  $value-class:       'chroma-kss__value',\n  $reference-class:   'chroma-kss__reference'\n) {\n  $markup: '';\n\n  @each $scheme, $data in map-get($chroma, 'schemes') {\n    // Display the scheme name and description.\n    $markup: $markup\n      + '<h3 class=\"' + $title-class + '\">#{$scheme}</h3>'\n      + '<p class=\"' + $description-class + '\">#{map-get($data, 'description')}</p>';\n\n    // Display the colors in the scheme.\n    @each $color, $data in map-get($chroma, 'names') {\n      $seperator: str-index($color, '::');\n      @if $scheme == str-slice($color, 1, $seperator - 1) {\n        $color: str-slice($color, $seperator + 2);\n        $value: map-get($data, 'value');\n        $reference: map-get($data, 'reference');\n        $referenced_by: map-get($data, 'referenced_by');\n\n        // @TODO: node-sass 3.6.0 crashes with too many \"+\" operators in one command.\n        $markup: $markup\n          + '<div class=\"#{$color-class}\">'\n          +   '<span class=\"#{$swatch-class}\" style=\"background-color: #{$value}\"></span>';\n        $markup: $markup\n          +   '<code class=\"#{$variable-class}\">#{$_chroma-spelling}(#{$color})</code>'\n          +   ' <span class=\"#{$alt-text-class}\">uses the #{$_chroma-spelling}:</span> ';\n        $markup: $markup\n          +   '<span class=\"#{$value-class}\"><code>#{$value}</code>';\n        @if $reference {\n          $markup: $markup + ' (#{$reference})';\n        }\n        $markup: $markup + '</span>';\n        @if length($referenced_by) > 0 {\n          $markup: $markup + ' <span class=\"#{$reference_class}\">This #{$_chroma-spelling} is inherited by: ';\n          @for $i from 1 through length($referenced_by) {\n            $markup: $markup + nth($referenced_by, $i);\n            @if ($i != length($referenced_by)) {\n              $markup: $markup + ', ';\n            }\n          }\n          $markup: $markup + '</span>';\n        }\n        $markup: $markup + '</div>';\n      }\n    }\n  }\n\n  @if $markup and $wrapper-class {\n    $markup: '<div class=\"' + $wrapper-class + '\">' + $markup + '</div>';\n  }\n\n  $markup: '<!-- This markup is auto-generated from Sass with chroma-kss-markup(). Do not modify. -->' + $markup;\n\n  @return $markup;\n}\n\n// chroma-kss-styles()\n//\n// A mixin to add a series of rulesets that style Chroma color swatches in a KSS\n// style guide.\n//\n// Since the mixin writes CSS selectors, the mixin can be used at the root of a\n// stylesheet.\n//\n// Usage:\n// ```scss\n// // Include chroma's optional kss module.\n// @import 'chroma/kss';\n//\n// @include chroma-kss-styles();\n// ```\n//\n// $wrapper-class     - Defaults to 'kss-style'.\n// $title-class       - Defaults to 'chroma-kss__title'.\n// $description-class - Defaults to 'chroma-kss__description'.\n// $color-class       - Defaults to 'chroma-kss'.\n// $swatch-class      - Defaults to 'chroma-kss__swatch'.\n// $variable-class    - Defaults to 'chroma-kss__variable'.\n// $alt-text-class    - Defaults to 'chroma-kss__alt-text'.\n// $value-class       - Defaults to 'chroma-kss__value'.\n// $reference-class   - Defaults to 'chroma-kss__reference'.\n//\n// Style guide: kss.chroma-kss-styles\n@mixin chroma-kss-styles(\n  $wrapper-class:     'kss-style',\n  $title-class:       'chroma-kss__title',\n  $description-class: 'chroma-kss__description',\n  $color-class:       'chroma-kss',\n  $swatch-class:      'chroma-kss__swatch',\n  $variable-class:    'chroma-kss__variable',\n  $alt-text-class:    'chroma-kss__alt-text',\n  $value-class:       'chroma-kss__value',\n  $reference-class:   'chroma-kss__reference'\n) {\n  @if $wrapper-class {\n    .#{$wrapper-class} {\n      @include _chroma-kss-styles(\n        $title-class,\n        $description-class,\n        $color-class,\n        $swatch-class,\n        $variable-class,\n        $alt-text-class,\n        $value-class,\n        $reference-class\n      );\n    }\n  }\n  @else {\n    @include _chroma-kss-styles(\n      $title-class,\n      $description-class,\n      $color-class,\n      $swatch-class,\n      $variable-class,\n      $alt-text-class,\n      $value-class,\n      $reference-class\n    );\n  }\n}\n\n// _chroma-kss-styles()\n//\n// Helper mixin for chroma-kss-styles().\n//\n// No style guide reference.\n@mixin _chroma-kss-styles(\n  $title-class:       'chroma-kss__title',\n  $description-class: 'chroma-kss__description',\n  $color-class:       'chroma-kss',\n  $swatch-class:      'chroma-kss__swatch',\n  $variable-class:    'chroma-kss__variable',\n  $alt-text-class:    'chroma-kss__alt-text',\n  $value-class:       'chroma-kss__value',\n  $reference-class:   'chroma-kss__reference'\n  ) {\n\n  .#{$color-class} {\n    line-height: 50px;\n  }\n\n  .#{$swatch-class} {\n    display: inline-block;\n    width: 40px;\n    height: 40px;\n    border-radius: 40px;\n    border: 2px solid #000;\n    margin-right: 10px;\n    vertical-align: middle;\n  }\n\n  .#{$variable-class} {\n    margin-right: 10px;\n  }\n\n  .#{$alt-text-class} {\n    position: absolute !important;\n    height: 1px;\n    width: 1px;\n    overflow: hidden;\n    // IE6 and IE7 use the wrong syntax.\n    *clip: rect(1px 1px 1px 1px);\n    clip: rect(1px, 1px, 1px, 1px);\n  }\n\n  .#{$value-class} {\n    color: #bbb;\n\n    code {\n      color: #bbb;\n    }\n\n    &:before {\n      // \"\\2192\" is unicode for right arrow. \"\\ \" is a hack; otherwise space is\n      // ignored in some browsers.\n      content: '\\2192\\ ';\n      font-family: sans-serif;\n    }\n  }\n\n  .#{$reference-class} {\n    display: block;\n    position: relative;\n    top: -12px;\n    line-height: 25px;\n    padding-left: 50px;\n    color: #999;\n  }\n}\n"]}